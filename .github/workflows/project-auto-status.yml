name: Project v2 Auto Status (Simplified)

on:
  pull_request:
    types: [opened, reopened, ready_for_review, converted_to_draft, closed]

permissions:
  contents: read
  pull-requests: write
  repository-projects: write

jobs:
  project_v2_route:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        id: vars
        run: |
          echo "OWNER=alikerock" >> $GITHUB_OUTPUT          # 사용자/조직
          echo "PROJECT_NUMBER=3" >> $GITHUB_OUTPUT         # 보드 번호 (URL에서 projects/3)
          echo "STATUS_TODO=Todo" >> $GITHUB_OUTPUT
          echo "STATUS_INPROGRESS=In Progress" >> $GITHUB_OUTPUT
          echo "STATUS_DONE=Done" >> $GITHUB_OUTPUT

      - name: Add PR to Project and update Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const owner = "${{ steps.vars.outputs.OWNER }}";
            const projectNumber = parseInt("${{ steps.vars.outputs.PROJECT_NUMBER }}", 10);

            // 1. 프로젝트와 Status 옵션 조회
            const q = `
              query($owner: String!, $projectNumber: Int!) {
                repositoryOwner(login: $owner) {
                  projectV2(number: $projectNumber) {
                    id
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }`;
            const data = await github.graphql(q, { owner, projectNumber });
            const project = data.repositoryOwner.projectV2;
            if (!project) core.setFailed("Project not found.");
            const projectId = project.id;

            const statusField = project.fields.nodes.find(f => f.name === "Status");
            if (!statusField) core.setFailed("No 'Status' field found.");
            const findOpt = (name) => {
              const opt = statusField.options.find(o => o.name === name);
              if (!opt) core.setFailed(`Option '${name}' not found in Status.`);
              return opt.id;
            };

            // 2. 현재 PR nodeId
            const nodeId = context.payload.pull_request.node_id;

            // 3. 프로젝트에 PR 추가
            const addMu = `
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }`;
            const addRes = await github.graphql(addMu, { projectId, contentId: nodeId });
            const itemId = addRes.addProjectV2ItemById.item.id;

            // 4. 이벤트 → Status 매핑
            let target = null;
            if (["opened","reopened","converted_to_draft"].includes(context.payload.action)) {
              target = "${{ steps.vars.outputs.STATUS_INPROGRESS }}";
            }
            if (context.payload.action === "ready_for_review") {
              target = "${{ steps.vars.outputs.STATUS_TODO }}"; // 리뷰 준비 → Todo
            }
            if (context.payload.action === "closed") {
              target = context.payload.pull_request.merged
                ? "${{ steps.vars.outputs.STATUS_DONE }}"
                : "${{ steps.vars.outputs.STATUS_TODO }}";
            }
            if (!target) {
              core.info("No status update required.");
              return;
            }

            // 5. Status 업데이트
            const update = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optId: String!) {
                updateProjectV2ItemFieldValue(input:{
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value:{ singleSelectOptionId: $optId }
                }) {
                  projectV2Item { id }
                }
              }`;
            await github.graphql(update, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optId: findOpt(target)
            });
            core.info(`Status updated to '${target}'`);
